{"version":3,"file":"content.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;AAED;AACA,oBAAoB,yEAAyE;AAC7F,mBAAmB,6EAA6E;AAChG,iBAAiB,4FAA4F;AAC7G;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,sCAAsC,gCAAgC;AACtE;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,cAAc,6BAA6B,mBAAmB,oCAAoC,uBAAuB;AACjK;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,wBAAwB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,uFAAuF;AACvF;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;;AAEA;AACA,e","sources":["webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/make namespace object","webpack://extension/./src/content.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","console.log('Content script loaded');\n\nconst browserAPI = typeof browser !== \"undefined\" ? browser : chrome;\n\n\nbrowserAPI.runtime.onMessage.addListener((message) => {\n    if (message.action === 'analyze_page') {\n        if (typeof analyzeLinks !== 'undefined') {\n            analyzeLinks();\n        } else {\n            console.error(\"analyzeLinks is not defined in content.js\");\n        }\n    }\n});\n\nconst websiteDomSelectorDict = {\n    'youtube.com': {'textTarget': '#video-title', 'ancestorTarget': 'ytd-rich-item-renderer'},\n    'reddit.com': {'textTarget': 'faceplate-screen-reader-content', 'ancestorTarget': 'article'},\n    'bsky.app': {'textTarget': '[data-testid=\"postText\"]', 'ancestorTarget': '[data-feed-context=\"friends\"]'},\n};\n\nconst analyzeLinks = async () => {\n    if (typeof document === 'undefined') return; // Ensure this only runs in a content script\n    \n    // Run immediately if the DOM is already loaded\n    if (document.readyState === 'complete' || document.readyState === 'interactive') {\n        processLinks();\n    } else {\n        document.addEventListener('DOMContentLoaded', processLinks);\n    }\n};\n\nconst waitForElements = (selector, callback) => {\n    const observer = new MutationObserver((mutations, observer) => {\n        const elements = document.querySelectorAll(selector);\n        if (elements.length > 0) {\n            callback(elements);\n            observer.disconnect();\n        }\n    });\n\n    observer.observe(document.body, { childList: true, subtree: true });\n}\n\nconst processLinks = async () => {\n    const cleanHostname = window.location.hostname.replace('www.', '');\n    const domSelectorForURL = websiteDomSelectorDict[cleanHostname]['textTarget'];\n    const domSelectorForAncestor = websiteDomSelectorDict[cleanHostname]['ancestorTarget'];\n    console.log(`Processing links for ${cleanHostname}, the domselectorForUrl is ${domSelectorForURL} and the domSelectorForAncestor is ${domSelectorForAncestor}`);\n    waitForElements(domSelectorForURL, (elements) => {\n        console.log(`Found ${elements.length} target elements`);\n        const targetElements = elements;\n    \n        for (let targetElement of targetElements) {\n            const message = {\n                action: 'classify',\n                text: targetElement.innerText,\n            };\n    \n            console.log('Sending message to background script:', message);\n            browserAPI.runtime.sendMessage(message, (response) => {\n                console.log('Received response from background script:', response);\n                if (response && response.length > 0) {\n                    const classification = response[0];\n    \n                    if (classification.label === 'NEGATIVE' && classification.score > 0.7) {\n                        console.log(`Bad vibes detected in \"${targetElement.innerText}\"`);\n                        const wrapper = document.createElement('div');\n                        wrapper.innerText = 'Bad vibes blocked';\n                        wrapper.style.backgroundColor = 'rgba(255, 0, 0, 0.5)';\n                        wrapper.style.color = 'white';\n                        wrapper.style.padding = '10px';\n                        wrapper.style.borderRadius = '5px';\n                        wrapper.style.display = 'inline-block';\n                        wrapper.style.cursor = 'pointer';\n                        wrapper.style.zIndex = '1000';\n    \n                        targetElement.style.display = 'none'; // Hide the targetElement\n                        targetElement.parentNode.insertBefore(wrapper, targetElement); // Insert the wrapper in place of the link\n                    }\n                }\n            });\n        }\n    });\n\n};\n\n// Run sentiment analysis when the content script is injected\nanalyzeLinks();"],"names":[],"sourceRoot":""}